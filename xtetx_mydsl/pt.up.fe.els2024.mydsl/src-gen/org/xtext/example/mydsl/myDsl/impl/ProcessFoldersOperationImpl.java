/**
 * generated by Xtext 2.37.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.ProcessFoldersOperation;
import org.xtext.example.mydsl.myDsl.TopLevelOperation;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Process Folders Operation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ProcessFoldersOperationImpl#getFolders <em>Folders</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ProcessFoldersOperationImpl#getFolderOperations <em>Folder Operations</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ProcessFoldersOperationImpl extends TopLevelOperationImpl implements ProcessFoldersOperation
{
  /**
   * The cached value of the '{@link #getFolders() <em>Folders</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFolders()
   * @generated
   * @ordered
   */
  protected EList<String> folders;

  /**
   * The cached value of the '{@link #getFolderOperations() <em>Folder Operations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFolderOperations()
   * @generated
   * @ordered
   */
  protected EList<TopLevelOperation> folderOperations;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProcessFoldersOperationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.PROCESS_FOLDERS_OPERATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getFolders()
  {
    if (folders == null)
    {
      folders = new EDataTypeEList<String>(String.class, this, MyDslPackage.PROCESS_FOLDERS_OPERATION__FOLDERS);
    }
    return folders;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<TopLevelOperation> getFolderOperations()
  {
    if (folderOperations == null)
    {
      folderOperations = new EObjectContainmentEList<TopLevelOperation>(TopLevelOperation.class, this, MyDslPackage.PROCESS_FOLDERS_OPERATION__FOLDER_OPERATIONS);
    }
    return folderOperations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.PROCESS_FOLDERS_OPERATION__FOLDER_OPERATIONS:
        return ((InternalEList<?>)getFolderOperations()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.PROCESS_FOLDERS_OPERATION__FOLDERS:
        return getFolders();
      case MyDslPackage.PROCESS_FOLDERS_OPERATION__FOLDER_OPERATIONS:
        return getFolderOperations();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.PROCESS_FOLDERS_OPERATION__FOLDERS:
        getFolders().clear();
        getFolders().addAll((Collection<? extends String>)newValue);
        return;
      case MyDslPackage.PROCESS_FOLDERS_OPERATION__FOLDER_OPERATIONS:
        getFolderOperations().clear();
        getFolderOperations().addAll((Collection<? extends TopLevelOperation>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.PROCESS_FOLDERS_OPERATION__FOLDERS:
        getFolders().clear();
        return;
      case MyDslPackage.PROCESS_FOLDERS_OPERATION__FOLDER_OPERATIONS:
        getFolderOperations().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.PROCESS_FOLDERS_OPERATION__FOLDERS:
        return folders != null && !folders.isEmpty();
      case MyDslPackage.PROCESS_FOLDERS_OPERATION__FOLDER_OPERATIONS:
        return folderOperations != null && !folderOperations.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (folders: ");
    result.append(folders);
    result.append(')');
    return result.toString();
  }

} //ProcessFoldersOperationImpl
