/*
 * generated by Xtext 2.37.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.myDsl.ArgMaxOperation;
import org.xtext.example.mydsl.myDsl.ArgMinOperation;
import org.xtext.example.mydsl.myDsl.ConcatOperation;
import org.xtext.example.mydsl.myDsl.DropOperation;
import org.xtext.example.mydsl.myDsl.FilterOperation;
import org.xtext.example.mydsl.myDsl.LimitOperation;
import org.xtext.example.mydsl.myDsl.LoadJSON;
import org.xtext.example.mydsl.myDsl.LoadXML;
import org.xtext.example.mydsl.myDsl.LoadYAML;
import org.xtext.example.mydsl.myDsl.Model;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.PrintOperation;
import org.xtext.example.mydsl.myDsl.PrintTable;
import org.xtext.example.mydsl.myDsl.ProcessFoldersOperation;
import org.xtext.example.mydsl.myDsl.RenameOperation;
import org.xtext.example.mydsl.myDsl.SaveOperation;
import org.xtext.example.mydsl.myDsl.SelectOperation;
import org.xtext.example.mydsl.myDsl.TopLevelOperation;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.ARG_MAX_OPERATION:
				sequence_ArgMaxOperation(context, (ArgMaxOperation) semanticObject); 
				return; 
			case MyDslPackage.ARG_MIN_OPERATION:
				sequence_ArgMinOperation(context, (ArgMinOperation) semanticObject); 
				return; 
			case MyDslPackage.CONCAT_OPERATION:
				sequence_ConcatOperation(context, (ConcatOperation) semanticObject); 
				return; 
			case MyDslPackage.DROP_OPERATION:
				sequence_DropOperation(context, (DropOperation) semanticObject); 
				return; 
			case MyDslPackage.FILTER_OPERATION:
				sequence_FilterOperation(context, (FilterOperation) semanticObject); 
				return; 
			case MyDslPackage.LIMIT_OPERATION:
				sequence_LimitOperation(context, (LimitOperation) semanticObject); 
				return; 
			case MyDslPackage.LOAD_JSON:
				sequence_LoadJSON(context, (LoadJSON) semanticObject); 
				return; 
			case MyDslPackage.LOAD_XML:
				sequence_LoadXML(context, (LoadXML) semanticObject); 
				return; 
			case MyDslPackage.LOAD_YAML:
				sequence_LoadYAML(context, (LoadYAML) semanticObject); 
				return; 
			case MyDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MyDslPackage.PRINT_OPERATION:
				sequence_PrintOperation(context, (PrintOperation) semanticObject); 
				return; 
			case MyDslPackage.PRINT_TABLE:
				sequence_PrintTable(context, (PrintTable) semanticObject); 
				return; 
			case MyDslPackage.PROCESS_FOLDERS_OPERATION:
				sequence_ProcessFoldersOperation(context, (ProcessFoldersOperation) semanticObject); 
				return; 
			case MyDslPackage.RENAME_OPERATION:
				sequence_RenameOperation(context, (RenameOperation) semanticObject); 
				return; 
			case MyDslPackage.SAVE_OPERATION:
				sequence_SaveOperation(context, (SaveOperation) semanticObject); 
				return; 
			case MyDslPackage.SELECT_OPERATION:
				sequence_SelectOperation(context, (SelectOperation) semanticObject); 
				return; 
			case MyDslPackage.TOP_LEVEL_OPERATION:
				sequence_TopLevelOperation(context, (TopLevelOperation) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     TopLevelOperation returns ArgMaxOperation
	 *     ArgMaxOperation returns ArgMaxOperation
	 *
	 * Constraint:
	 *     (column=STRING table=STRING target=STRING)
	 * </pre>
	 */
	protected void sequence_ArgMaxOperation(ISerializationContext context, ArgMaxOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ARG_MAX_OPERATION__COLUMN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ARG_MAX_OPERATION__COLUMN));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ARG_MAX_OPERATION__TABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ARG_MAX_OPERATION__TABLE));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ARG_MAX_OPERATION__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ARG_MAX_OPERATION__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getArgMaxOperationAccess().getColumnSTRINGTerminalRuleCall_2_0(), semanticObject.getColumn());
		feeder.accept(grammarAccess.getArgMaxOperationAccess().getTableSTRINGTerminalRuleCall_4_0(), semanticObject.getTable());
		feeder.accept(grammarAccess.getArgMaxOperationAccess().getTargetSTRINGTerminalRuleCall_6_0(), semanticObject.getTarget());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TopLevelOperation returns ArgMinOperation
	 *     ArgMinOperation returns ArgMinOperation
	 *
	 * Constraint:
	 *     (column=STRING table=STRING target=STRING)
	 * </pre>
	 */
	protected void sequence_ArgMinOperation(ISerializationContext context, ArgMinOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ARG_MIN_OPERATION__COLUMN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ARG_MIN_OPERATION__COLUMN));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ARG_MIN_OPERATION__TABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ARG_MIN_OPERATION__TABLE));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ARG_MIN_OPERATION__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ARG_MIN_OPERATION__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getArgMinOperationAccess().getColumnSTRINGTerminalRuleCall_2_0(), semanticObject.getColumn());
		feeder.accept(grammarAccess.getArgMinOperationAccess().getTableSTRINGTerminalRuleCall_4_0(), semanticObject.getTable());
		feeder.accept(grammarAccess.getArgMinOperationAccess().getTargetSTRINGTerminalRuleCall_6_0(), semanticObject.getTarget());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TopLevelOperation returns ConcatOperation
	 *     ConcatOperation returns ConcatOperation
	 *
	 * Constraint:
	 *     (target=STRING tables+=STRING tables+=STRING*)
	 * </pre>
	 */
	protected void sequence_ConcatOperation(ISerializationContext context, ConcatOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TopLevelOperation returns DropOperation
	 *     DropOperation returns DropOperation
	 *
	 * Constraint:
	 *     table=STRING
	 * </pre>
	 */
	protected void sequence_DropOperation(ISerializationContext context, DropOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DROP_OPERATION__TABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DROP_OPERATION__TABLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDropOperationAccess().getTableSTRINGTerminalRuleCall_1_0(), semanticObject.getTable());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TopLevelOperation returns FilterOperation
	 *     FilterOperation returns FilterOperation
	 *
	 * Constraint:
	 *     (column=STRING table=STRING condition=STRING value=STRING target=STRING?)
	 * </pre>
	 */
	protected void sequence_FilterOperation(ISerializationContext context, FilterOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TopLevelOperation returns LimitOperation
	 *     LimitOperation returns LimitOperation
	 *
	 * Constraint:
	 *     (table=STRING start=INT end=INT)
	 * </pre>
	 */
	protected void sequence_LimitOperation(ISerializationContext context, LimitOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.LIMIT_OPERATION__TABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.LIMIT_OPERATION__TABLE));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.LIMIT_OPERATION__START) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.LIMIT_OPERATION__START));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.LIMIT_OPERATION__END) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.LIMIT_OPERATION__END));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLimitOperationAccess().getTableSTRINGTerminalRuleCall_2_0(), semanticObject.getTable());
		feeder.accept(grammarAccess.getLimitOperationAccess().getStartINTTerminalRuleCall_4_0(), semanticObject.getStart());
		feeder.accept(grammarAccess.getLimitOperationAccess().getEndINTTerminalRuleCall_6_0(), semanticObject.getEnd());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TopLevelOperation returns LoadJSON
	 *     LoadOperation returns LoadJSON
	 *     LoadJSON returns LoadJSON
	 *
	 * Constraint:
	 *     (file=STRING table=STRING (attributes+=STRING attributes+=STRING*)? (nested+=STRING nested+=STRING*)?)
	 * </pre>
	 */
	protected void sequence_LoadJSON(ISerializationContext context, LoadJSON semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TopLevelOperation returns LoadXML
	 *     LoadOperation returns LoadXML
	 *     LoadXML returns LoadXML
	 *
	 * Constraint:
	 *     (file=STRING table=STRING (nested+=STRING nested+=STRING*)?)
	 * </pre>
	 */
	protected void sequence_LoadXML(ISerializationContext context, LoadXML semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TopLevelOperation returns LoadYAML
	 *     LoadOperation returns LoadYAML
	 *     LoadYAML returns LoadYAML
	 *
	 * Constraint:
	 *     (file=STRING table=STRING (nested+=STRING nested+=STRING*)?)
	 * </pre>
	 */
	protected void sequence_LoadYAML(ISerializationContext context, LoadYAML semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     operations+=TopLevelOperation+
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TopLevelOperation returns PrintOperation
	 *     PrintOperation returns PrintOperation
	 *
	 * Constraint:
	 *     {PrintOperation}
	 * </pre>
	 */
	protected void sequence_PrintOperation(ISerializationContext context, PrintOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TopLevelOperation returns PrintTable
	 *     PrintOperation returns PrintTable
	 *     PrintTable returns PrintTable
	 *
	 * Constraint:
	 *     table=STRING
	 * </pre>
	 */
	protected void sequence_PrintTable(ISerializationContext context, PrintTable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PRINT_TABLE__TABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PRINT_TABLE__TABLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrintTableAccess().getTableSTRINGTerminalRuleCall_1_0(), semanticObject.getTable());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TopLevelOperation returns ProcessFoldersOperation
	 *     ProcessFoldersOperation returns ProcessFoldersOperation
	 *
	 * Constraint:
	 *     (folders+=STRING folders+=STRING* folderOperations+=TopLevelOperation+)
	 * </pre>
	 */
	protected void sequence_ProcessFoldersOperation(ISerializationContext context, ProcessFoldersOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TopLevelOperation returns RenameOperation
	 *     RenameOperation returns RenameOperation
	 *
	 * Constraint:
	 *     (original=STRING renamed=STRING table=STRING)
	 * </pre>
	 */
	protected void sequence_RenameOperation(ISerializationContext context, RenameOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RENAME_OPERATION__ORIGINAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RENAME_OPERATION__ORIGINAL));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RENAME_OPERATION__RENAMED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RENAME_OPERATION__RENAMED));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RENAME_OPERATION__TABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RENAME_OPERATION__TABLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRenameOperationAccess().getOriginalSTRINGTerminalRuleCall_2_0(), semanticObject.getOriginal());
		feeder.accept(grammarAccess.getRenameOperationAccess().getRenamedSTRINGTerminalRuleCall_4_0(), semanticObject.getRenamed());
		feeder.accept(grammarAccess.getRenameOperationAccess().getTableSTRINGTerminalRuleCall_6_0(), semanticObject.getTable());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TopLevelOperation returns SaveOperation
	 *     SaveOperation returns SaveOperation
	 *
	 * Constraint:
	 *     (tables+=STRING tables+=STRING* file=STRING format=STRING)
	 * </pre>
	 */
	protected void sequence_SaveOperation(ISerializationContext context, SaveOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TopLevelOperation returns SelectOperation
	 *     SelectOperation returns SelectOperation
	 *
	 * Constraint:
	 *     (columns+=STRING columns+=STRING* table=STRING target=STRING)
	 * </pre>
	 */
	protected void sequence_SelectOperation(ISerializationContext context, SelectOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TopLevelOperation returns TopLevelOperation
	 *
	 * Constraint:
	 *     {TopLevelOperation}
	 * </pre>
	 */
	protected void sequence_TopLevelOperation(ISerializationContext context, TopLevelOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
